package com.Mukhtar.Xharktank.MainController;

 

import java.util.ArrayList;
import java.util.HashMap;

import java.util.List;
 

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import com.Mukhtar.Xharktank.Model.Offer;
import com.Mukhtar.Xharktank.Model.Pitch_res;
import com.Mukhtar.Xharktank.Model.Pitches;
import com.Mukhtar.Xharktank.Repos.OfferRepo;
import com.Mukhtar.Xharktank.Repos.Repo;

 

@RestController // This means that this class is a Controller
  // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired 
  private Repo repo;// This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  
   
  @Autowired
  private OfferRepo offerRepo;

   // Map ONLY POST Requests
  @PostMapping( "/pitches")
   
  public HashMap<String, String> addNewUser (@RequestBody Pitches p) {
	  
	   
	  if(p.getEntrepreneur()==null||(int)p.getAskAmount()==0 ||p.getPitchIdea()==null||p.getEquity()==0||p.getPitchTitle()==null||p.getEquity()>100)
	  {
		  throw new ResponseStatusException(
				  HttpStatus.BAD_REQUEST 
				);
	  }

    Pitches n=p;
    
    HashMap<String, String> map = new HashMap<>();
    
    repo.save(n);String id= String.valueOf(n.getId());
    map.put("id", id);
    return map;
  }
  @PostMapping(path="pitches/{id}/makeOffer")
   
  public   HashMap<String, String> makeoffer(@RequestBody Offer o,@PathVariable("id") int id)
  {  
	  if(!repo.existsById(id))
	  {
		  throw new ResponseStatusException(
				  HttpStatus.NOT_FOUND 
				);
	  }
	  if(o.getInvestor()==null||(int)o.getAmount()==0 ||o.getComment()==null||(int)o.getEquity()==0||o.getEquity()>100)
	  {
		  throw new ResponseStatusException(
				  HttpStatus.BAD_REQUEST 
				);
	  }
	  Pitches pitch = repo.findById(id); 
	  o.setPitch(pitch);
	  pitch.getOffers().add(o);
	  offerRepo.save(o);
	  repo.save(pitch);
	  HashMap<String, String> map = new HashMap<>();
	  
	  map.put("id", String.valueOf(o.getId()));
	 
	 
	 return   map;
  
   
	  
  }

  @GetMapping(path="/pitches")
  
  public  List<Pitch_res> getAllUsers() {
	  List<Pitch_res> response=new ArrayList<>();
	  List<Pitches> p=repo.findAllByOrderByIdDesc();
	  for(int i=0;i<p.size();i++)
	  {
		  response.add(new Pitch_res(p.get(i)));
	  }
    // This returns a JSON or XML with the users
    return response;
  }
  @GetMapping(path="/pitches/{id}")
  public    Pitch_res  findbyid(  @PathVariable("id") int  id)
  {
	  if(!repo.existsById(id))
	  {
		  throw new ResponseStatusException(
				  HttpStatus.NOT_FOUND 
				);
	  }
	  Pitch_res response=new Pitch_res(repo.findById(id));
		

		return    response;
	  
	  
  }
  
}